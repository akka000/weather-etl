services:
  postgres:
    image: postgres:14
    container_name: weather_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 10

  airflow-init:
    build:
      context: ..
      dockerfile: docker/Dockerfile.airflow
    container_name: weather_airflow_init
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW_EXECUTOR}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW_LOAD_EXAMPLES}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    volumes:
      - ../dags:/opt/airflow/dags
      - ../etl:/opt/airflow/etl
    command: >
      bash -c "
      airflow db init &&
      airflow users create --username ${AIRFLOW_USER} --firstname ${AIRFLOW_FIRSTNAME} --lastname ${AIRFLOW_LASTNAME} --role Admin --email ${AIRFLOW_EMAIL} --password ${AIRFLOW_PASSWORD}
      "

  airflow:
    build:
      context: ..
      dockerfile: docker/Dockerfile.airflow
    container_name: weather_airflow
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW_EXECUTOR}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW_LOAD_EXAMPLES}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    ports:
      - "8080:8080"
    volumes:
      - ../dags:/opt/airflow/dags
      - ../etl:/opt/airflow/etl
    command: >
      bash -c "
      exec airflow scheduler & 
      exec airflow webserver
      "

  etl:
    build:
      context: ..
      dockerfile: docker/Dockerfile.etl
    container_name: weather_etl
    depends_on:
      postgres:
        condition: service_healthy
      airflow:
        condition: service_started
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - weather_data:/app/data
    command: ["python3.11", "etl/fetch_weather.py"]

volumes:
  postgres_data:
  weather_data: